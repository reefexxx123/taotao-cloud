server:
  port: 9900
  http2:
    enabled: true
  undertow:
    buffer-size: 2048
    direct-buffers: true
    io-threads: 24
    worker-threads: 1500

spring:
  cache:
    type: none
  main:
    allow-bean-definition-overriding: true
  application:
    name: taotao-cloud-gateway-center
  redis:
    client-name: taotao-cloud-gateway-redis-client
    host: ${TAOTAO-CLOUD-REDIS-HOST:192.168.99.230}
    port: ${TAOTAO-CLOUD-REDIS-PORT:6379}
    password: ${TAOTAO-CLOUD-REDIS-PASSWORD:123456}
    lettuce:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
    nacos:
      discovery:
        server-addr: ${TAOTAO-CLOUD-NACOS-HOST:192.168.99.230}:${TAOTAO-CLOUD-NACOS-PORT:8848}
        metadata:
          version: 4
      # 开发时候关闭nacos配置中心
      config:
        enabled: false
        server-addr: ${TAOTAO-CLOUD-NACOS-HOST:192.168.99.230}:${TAOTAO-CLOUD-NACOS-PORT:8848}
        namespace: f402a0ea-5ce7-43cc-b19b-3fb7ded6e46e
        file-extension: yml
    sentinel:
      transport:
        dashboard: ${TAOTAO-CLOUD-SENTINEL-DASHBOARD-HOST:192.168.99.230}:${TAOTAO-CLOUD-SENTINEL-DASHBOARD-PORT:8858}
        port: ${TAOTAO-CLOUD-SENTINEL-PORT:8719}
      scg:
        fallback:
          mode: response
          response-status: 200
          response-body: "{'data': null, 'code': 500,'message': '访问频繁,进入系统熔断'}"
      eager: true
    gateway:
      loadbalancer:
        use404: false
      discovery:
        locator:
          lower-case-service-id: true
          enabled: true
      routes:
        - id: auth-user-password-token
          uri: lb://taotao-cloud-auth-center
          predicates:
            - Path=${taotao.cloud.gateway.base-uri}/auth/oauth/token/user
          filters:
            - StripPrefix=3
            - RequestTime=true
            - ImageCode
            - PreserveHostHeader
        - id: auth-login-third-token
          uri: lb://taotao-cloud-auth-center
          predicates:
            - Path=${taotao.cloud.gateway.base-uri}/auth/oauth/token/third
          filters:
            - StripPrefix=3
            - RequestTime=true
            - PreserveHostHeader
        # 发送短信接口要做接口限制
        - id: auth-sms-code
          uri: lb://taotao-cloud-auth-center
          predicates:
            - Path=${taotao.cloud.gateway.base-uri}/auth/sms/code
          filters:
            - StripPrefix=3
            - RequestTime=true
            - PreserveHostHeader
        # 数据重复校验要做接口限制
        - id: uc-repeact-check
          uri: lb://taotao-cloud-uc-center
          predicates:
            - Path=${taotao.cloud.gateway.base-uri}/uc/repeat/check
          filters:
            - StripPrefix=3
            - RequestTime=true
            - PreserveHostHeader
        - id: taotao-cloud-uc-center
          uri: lb://taotao-cloud-uc-center
          predicates:
            - Path=${taotao.cloud.gateway.base-uri}/uc/**
          filters:
            - StripPrefix=3
            - RequestTime=true
            - PreserveHostHeader
        - id: taotao-cloud-auth-center
          uri: lb://taotao-cloud-auth-center
          predicates:
            - Path=${taotao.cloud.gateway.base-uri}/auth/**
          filters:
            - StripPrefix=3
            - PreserveHostHeader
            - name: RequestRateLimiter
              args:
                key-resolver: '#{@remoteAddrKeyResolver}'
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
        - id: taotao-cloud-order-center
          uri: lb://taotao-cloud-order-center
          predicates:
            - Path=${taotao.cloud.gateway.base-uri}/order/**
          filters:
            - StripPrefix=3
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@remoteAddrKeyResolver}"
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 5
        - id: taotao-cloud-product-center
          uri: lb://taotao-cloud-product-center
          predicates:
            - Path=${taotao.cloud.gateway.base-uri}/product/**
          filters:
            - StripPrefix=3
            - name: RequestRateLimiter
              args:
                #使用SpEL按名称引用bean
                key-resolver: "#{@remoteAddrKeyResolver}"
                #允许用户每秒处理多少个请求
                redis-rate-limiter.replenishRate: 1
                #令牌桶的容量，允许在一秒钟内完成的最大请求数
                redis-rate-limiter.burstCapacity: 5
  #      default-filters:
  #        # 降级配置
  #        - name: Hystrix
  #          args:
  #            name: default
  #            fallbackUri: 'forward:/fallback'
  kafka:
    bootstrap-servers: ${TAOTAO-CLOUD-KAFKA-HOST:192.168.99.230}:${TAOTAO-CLOUD-KAFKA-PORT:9092}
    producer:
      retries: 0
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
      properties:
        linger.ms: 500
    consumer:
      auto-commit-interval: 1S
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      concurrency: 5
      ack-mode: manual_immediate
      missing-topics-fatal: false
  sleuth:
    web:
      client:
        enabled: true
    sampler:
      probability: 1.0 # 将采样比例设置为 1.0，也就是全部都需要。默认是 0.1
  zipkin:
    enabled: false
    sender:
      type: kafka

#hystrix:
#  threadpool:
#    default:
#      coreSize: 1200
#      maximumSize: 15000
#      allowMaximumSizeToDivergeFromCoreSize: true
#      maxQueueSize: 2000
#      queueSizeRejectionThreshold: 1800
#  command:
#    default:
#      circuitBreaker:
#        # 当在配置时间窗口内达到此数量的失败后，进行短路。默认20个
#        requestVolumeThreshold: 30
#        # 触发短路的时间值，当该值设为5000时，则当触发 circuit break 后的5000毫秒内都会拒绝request
#        # 也就是5000毫秒后才会关闭circuit。默认5000
#        sleepWindowInMilliseconds: 45000
#      execution:
#        timeout:
#          enabled: true
#        isolation:
#          thread:
#            timeoutInMilliseconds: 90000

ribbon:
  eager-load:
    enabled: true
  ServerListRefreshInterval: 10  #刷新服务列表源的间隔时间
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  ReadTimeout: 90000
  ConnectTimeout: 90000
  OkToRetryOnAllOperations: true
  MaxAutoRetries: 1
  MaxAutoRetriesNextServer: 1

feign:
  sentinel:
    enabled: true
  hystrix:
    enabled: false

taotao:
  cloud:
    gateway:
      prefix: /api/
      version: v1.0
      base-uri: ${taotao.cloud.gateway.prefix}${taotao.cloud.gateway.version}
      #网关动态路由
      dynamic-route:
        enabled: false
        data-type: nacos
    swagger-agg:
      enabled: true
      api-docs-path: /api-docs
      swagger-version: 2.0
      generate-routes: taotao-cloud-uc-center,taotao-cloud-auth-center,taotao-cloud-order-center,taotao-cloud-product-center
    oauth2:
      token:
        store:
          type: redis
      security:
        ignore:
          # 忽略认证的地址
          http-urls: >
            /*/api-docs,
            /code,
            /uc/repeat/check,
            /auth/oauth/**,
            /auth/mobile/login,
            /auth/sms/code,
            /auth/social/**,
            /auth/css/**,
            /auth/images/**,
            /auth/js/**,
            /favicon.ico,
            /manifest.json,
            /robots.txt
        auth:
          # 续签
          renew:
            enable: true
            # 白名单
            include-client-ids:
              - webApp
    # 日志模块
    log:
      trace:
        enabled: true
      type: kafka

management:
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    tags:
      application: ${spring.application.name}
